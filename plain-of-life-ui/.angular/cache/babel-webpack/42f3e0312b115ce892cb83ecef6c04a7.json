{"ast":null,"code":"import { CellBase } from '../cell.base';\nexport class SimpleCell extends CellBase {\n  executeTurn(input, output) {\n    let neighbours = 0;\n    let i0 = input[0];\n\n    while (i0 != 0) {\n      i0 &= i0 - 1; // clear the least significant bit set\n\n      neighbours++;\n    }\n\n    if (neighbours == 0) {\n      if (Math.random() > 0.5) {\n        output[1] = 0b00010001;\n      } else {\n        output[1] = 0b01000100;\n      }\n    } else if (neighbours == 1) {\n      if (input[0] & 0b00000001) {\n        output[0] = 1;\n      } else if (input[0] & 0b00000010) {\n        output[0] = 2;\n      } else if (input[0] & 0b00000100) {\n        output[0] = 3;\n      } else if (input[0] & 0b00001000) {\n        output[0] = 4;\n      } else if (input[0] & 0b00010000) {\n        output[0] = 5;\n      } else if (input[0] & 0b00100000) {\n        output[0] = 6;\n      } else if (input[0] & 0b01000000) {\n        output[0] = 7;\n      } else if (input[0] & 0b10000000) {\n        output[0] = 0;\n      }\n\n      output[0] += 8;\n    } else if (neighbours == 2) {\n      output[0] = Math.floor(Math.random() * 8) + 8;\n    } else if (neighbours == 3) {\n      while (output[0] = 0) {\n        let moveDirection = Math.floor(Math.random() * 8);\n\n        switch (moveDirection) {\n          case 0:\n            if (input[0] & 0b00000001) {\n              output[0] = 8;\n            }\n\n            break;\n\n          case 1:\n            if (input[0] & 0b00000010) {\n              output[0] = 9;\n            }\n\n            break;\n\n          case 2:\n            if (input[0] & 0b00000100) {\n              output[0] = 10;\n            }\n\n            break;\n\n          case 3:\n            if (input[0] & 0b00001000) {\n              output[0] = 11;\n            }\n\n            break;\n\n          case 4:\n            if (input[0] & 0b00010000) {\n              output[0] = 12;\n            }\n\n            break;\n\n          case 5:\n            if (input[0] & 0b00100000) {\n              output[0] = 13;\n            }\n\n            break;\n\n          case 6:\n            if (input[0] & 0b01000000) {\n              output[0] = 14;\n            }\n\n            break;\n\n          default:\n            if (input[0] & 0b10000000) {\n              output[0] = 15;\n            }\n\n            break;\n        }\n      }\n    } else if (neighbours > 3) {\n      while (neighbours > 2) {\n        let killDirection = Math.floor(Math.random() * 8);\n\n        switch (killDirection) {\n          case 0:\n            if (input[0] & 0b00000001) {\n              output[1] |= 0b00000001;\n              input[0] &= 0b11111110;\n              neighbours--;\n            }\n\n            break;\n\n          case 1:\n            if (input[0] & 0b00000010) {\n              output[1] |= 0b00000010;\n              input[0] &= 0b11111101;\n              neighbours--;\n            }\n\n            break;\n\n          case 2:\n            if (input[0] & 0b00000100) {\n              output[1] |= 0b00000100;\n              input[0] &= 0b11111011;\n              neighbours--;\n            }\n\n            break;\n\n          case 3:\n            if (input[0] & 0b00001000) {\n              output[1] |= 0b00001000;\n              input[0] &= 0b11110111;\n              neighbours--;\n            }\n\n            break;\n\n          case 4:\n            if (input[0] & 0b00010000) {\n              output[1] |= 0b00010000;\n              input[0] &= 0b11101111;\n              neighbours--;\n            }\n\n            break;\n\n          case 5:\n            if (input[0] & 0b00100000) {\n              output[1] |= 0b00100000;\n              input[0] &= 0b11011111;\n              neighbours--;\n            }\n\n            break;\n\n          case 6:\n            if (input[0] & 0b01000000) {\n              output[1] |= 0b01000000;\n              input[0] &= 0b10111111;\n              neighbours--;\n            }\n\n            break;\n\n          default:\n            if (input[0] & 0b10000000) {\n              output[1] |= 0b10000000;\n              input[0] &= 0b01111111;\n              neighbours--;\n            }\n\n            break;\n        }\n      }\n    }\n  }\n\n  reproduce() {\n    return new SimpleCell();\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}