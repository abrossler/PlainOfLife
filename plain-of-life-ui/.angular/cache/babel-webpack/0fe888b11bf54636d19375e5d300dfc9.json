{"ast":null,"code":"//let debug = true;\nlet debug = false;\nexport let Board = /*#__PURE__*/(() => {\n  class Board {\n    constructor() {\n      this.sizeX = 0;\n      this.sizeY = 0;\n      this.turnListeners = [];\n      this.cells1 = [];\n      this.cells2 = [];\n      this.currentTurn = 0;\n    }\n\n    init(sizeX, sizeY, cellConstructor) {\n      this.sizeX = sizeX;\n      this.sizeY = sizeY;\n      this.currentTurn = 0;\n      this.cellConstructor = cellConstructor;\n      this.cells1 = new Array(this.sizeX * this.sizeX);\n\n      for (let i = 0; i < this.cells1.length; i++) {\n        let rand = Math.random();\n\n        if (rand > 0.97) {\n          this.cells1[i] = this.cells2[i] = new this.cellConstructor();\n        } else if (rand > 0.94) {\n          this.cells1[i] = this.cells2[i] = null;\n        }\n      } // this.cells1 = new Array<CellBase>(this.sizeX * this.sizeX);\n      // for( let i=0; i<this.cells1.length; i++){\n      //     let rand = Math.random();\n      //     if( rand > 0.97 ){\n      //         this.cells1[i] = new this.cellConstructor();\n      //     } else if( rand > 0.94 ) {\n      //         this.cells1[i] = null;\n      //     }\n      // }  \n      // this.cells1[10000] = null;\n      // this.cells1[10001] = null;\n      // this.cells1[10002] = null;\n\n    }\n\n    isRunning() {\n      return this.interval !== undefined;\n    }\n\n    start() {\n      if (this.isRunning()) {\n        return;\n      }\n\n      this.interval = window.setInterval(() => {\n        this.run();\n      }, 100);\n    }\n\n    stop() {\n      if (!this.isRunning()) {\n        return;\n      }\n\n      window.clearInterval(this.interval);\n      this.interval = undefined;\n    }\n\n    step() {\n      if (this.isRunning()) {\n        return;\n      }\n\n      this.run();\n    }\n\n    registerOnTurn(listener) {\n      this.turnListeners.push(listener);\n    }\n\n    run() {\n      this.executeTurn();\n      this.currentTurn++;\n\n      for (let listener of this.turnListeners) {\n        listener.onTurnExecuted(this);\n      }\n    }\n\n    executeTurn() {\n      let i = this.sizeX + 1;\n      let input = new Uint8Array(2);\n      let output = new Uint8Array(2);\n      let conflictIndices = [];\n\n      for (let y = 1; y < this.sizeY - 1; y++) {\n        for (let x = 1; x < this.sizeX - 1; x++) {\n          // Prepare input\n          if (this.cells2[i] !== undefined && this.cells2[i] !== null) {\n            input[0] = input[1] = 0b00000000;\n            output[0] = output[1] = 0b00000000;\n            let iMinusSizeX = i - this.sizeX;\n            let iPlusSizeX = i + this.sizeX;\n\n            if (debug) {\n              console.log(\"Cell Neighbours\");\n              let s = \"\";\n\n              if (this.cells2[iMinusSizeX - 1] !== undefined) {\n                s += \"X\";\n              } else {\n                s += \".\";\n              }\n\n              if (this.cells2[iMinusSizeX] !== undefined) {\n                s += \"X\";\n              } else {\n                s += \".\";\n              }\n\n              if (this.cells2[iMinusSizeX + 1] !== undefined) {\n                s += \"X\";\n              } else {\n                s += \".\";\n              }\n\n              console.log(s);\n              s = \"\";\n\n              if (this.cells2[i - 1] !== undefined) {\n                s += \"X\";\n              } else {\n                s += \".\";\n              }\n\n              s += \"O\";\n\n              if (this.cells2[i + 1] !== undefined) {\n                s += \"X\";\n              } else {\n                s += \".\";\n              }\n\n              console.log(s);\n              s = \"\";\n\n              if (this.cells2[iPlusSizeX - 1] !== undefined) {\n                s += \"X\";\n              } else {\n                s += \".\";\n              }\n\n              if (this.cells2[iPlusSizeX] !== undefined) {\n                s += \"X\";\n              } else {\n                s += \".\";\n              }\n\n              if (this.cells2[iPlusSizeX + 1] !== undefined) {\n                s += \"X\";\n              } else {\n                s += \".\";\n              }\n\n              console.log(s);\n            }\n\n            if (this.cells2[iMinusSizeX] !== undefined) {\n              input[0] |= 0b00000001;\n\n              if (this.cells2[iMinusSizeX] !== null) {\n                input[1] |= 0b00000001;\n              }\n            }\n\n            if (this.cells2[iMinusSizeX + 1] !== undefined) {\n              input[0] |= 0b00000010;\n\n              if (this.cells2[iMinusSizeX + 1] !== null) {\n                input[1] |= 0b00000010;\n              }\n            }\n\n            if (this.cells2[i + 1] !== undefined) {\n              input[0] |= 0b00000100;\n\n              if (this.cells2[i + 1] !== null) {\n                input[1] |= 0b00000100;\n              }\n            }\n\n            if (this.cells2[iPlusSizeX + 1] !== undefined) {\n              input[0] |= 0b00001000;\n\n              if (this.cells2[iPlusSizeX + 1] !== null) {\n                input[1] |= 0b00001000;\n              }\n            }\n\n            if (this.cells2[iPlusSizeX] !== undefined) {\n              input[0] |= 0b00010000;\n\n              if (this.cells2[iPlusSizeX] !== null) {\n                input[1] |= 0b00010000;\n              }\n            }\n\n            if (this.cells2[iPlusSizeX - 1] !== undefined) {\n              input[0] |= 0b00100000;\n\n              if (this.cells2[iPlusSizeX - 1] !== null) {\n                input[1] |= 0b00100000;\n              }\n            }\n\n            if (this.cells2[i - 1] !== undefined) {\n              input[0] |= 0b01000000;\n\n              if (this.cells2[i - 1] !== null) {\n                input[1] |= 0b01000000;\n              }\n            }\n\n            if (this.cells2[iMinusSizeX - 1] !== undefined) {\n              input[0] |= 0b10000000;\n\n              if (this.cells2[iMinusSizeX - 1] !== null) {\n                input[1] |= 0b10000000;\n              }\n            }\n\n            if (debug) {\n              console.log(\"Input[0]: \" + input[0].toString(2).padStart(8, \"0\"));\n              console.log(\"Input[1]: \" + input[1].toString(2).padStart(8, \"0\"));\n            } // Execute turn\n\n\n            this.cells2[i].executeTurn(input, output);\n\n            if (debug) {\n              console.log(\"Output[0]: \" + output[0].toString(2).padStart(8, \"0\"));\n              console.log(\"Output[1]: \" + output[1].toString(2).padStart(8, \"0\"));\n            } // Process output\n            // Either move or reproduce...\n\n\n            if (output[0] & Board.MOVE_OR_REPRODUCE) {\n              // Get Position where to move or reproduce\n              let newPosition = output[0] & Board.POSITION;\n              let newIndex;\n\n              switch (newPosition) {\n                case 0:\n                  newIndex = iMinusSizeX;\n                  break;\n\n                case 1:\n                  newIndex = iMinusSizeX + 1;\n                  break;\n\n                case 2:\n                  newIndex = i + 1;\n                  break;\n\n                case 3:\n                  newIndex = iPlusSizeX + 1;\n                  break;\n\n                case 4:\n                  newIndex = iPlusSizeX;\n                  break;\n\n                case 5:\n                  newIndex = iPlusSizeX - 1;\n                  break;\n\n                case 6:\n                  newIndex = i - 1;\n                  break;\n\n                default:\n                  newIndex = iMinusSizeX - 1;\n                  break;\n              } // Reproduce if position is free\n\n\n              if (this.cells2[newIndex] === undefined) {\n                if (this.cells1[newIndex] !== undefined && this.cells1[newIndex] !== null) {\n                  conflictIndices.push(newIndex);\n                }\n\n                this.cells1[newIndex] = this.cells2[i].reproduce(); // Move if position is occupied by standard cell\n              } else if (this.cells2[newIndex] === null) {\n                if (this.cells1[newIndex] !== undefined && this.cells1[newIndex] !== null) {\n                  conflictIndices.push(newIndex);\n                }\n\n                this.cells1[newIndex] = this.cells2[i];\n                this.cells1[i] = undefined;\n              } // ... or set / kill other cells\n\n            } else {\n              if (output[1] & 0b00000001) {\n                if (this.cells2[iMinusSizeX] === undefined) {\n                  if (this.cells1[iMinusSizeX] === undefined) {\n                    this.cells1[iMinusSizeX] = null;\n                  }\n                } else if (this.cells2[iMinusSizeX] === null) {\n                  if (this.cells1[iMinusSizeX] === null) {\n                    this.cells1[iMinusSizeX] = undefined;\n                  }\n                }\n              }\n\n              if (output[1] & 0b00000010) {\n                if (this.cells2[iMinusSizeX + 1] === undefined) {\n                  if (this.cells1[iMinusSizeX + 1] === undefined) {\n                    this.cells1[iMinusSizeX + 1] = null;\n                  }\n                } else if (this.cells2[iMinusSizeX + 1] === null) {\n                  if (this.cells1[iMinusSizeX + 1] === null) {\n                    this.cells1[iMinusSizeX + 1] = undefined;\n                  }\n                }\n              }\n\n              if (output[1] & 0b00000100) {\n                if (this.cells2[i + 1] === undefined) {\n                  if (this.cells1[i + 1] === undefined) {\n                    this.cells1[i + 1] = null;\n                  }\n                } else if (this.cells2[i + 1] === null) {\n                  if (this.cells1[i + 1] === null) {\n                    this.cells1[i + 1] = undefined;\n                  }\n                }\n              }\n\n              if (output[1] & 0b00001000) {\n                if (this.cells2[iPlusSizeX + 1] === undefined) {\n                  if (this.cells1[iPlusSizeX + 1] === undefined) {\n                    this.cells1[iPlusSizeX + 1] = null;\n                  }\n                } else if (this.cells2[iPlusSizeX + 1] === null) {\n                  if (this.cells1[iPlusSizeX + 1] === null) {\n                    this.cells1[iPlusSizeX + 1] = undefined;\n                  }\n                }\n              }\n\n              if (output[1] & 0b00010000) {\n                if (this.cells2[iPlusSizeX] === undefined) {\n                  if (this.cells1[iPlusSizeX] === undefined) {\n                    this.cells1[iPlusSizeX] = null;\n                  }\n                } else if (this.cells2[iPlusSizeX] === null) {\n                  if (this.cells1[iPlusSizeX] === null) {\n                    this.cells1[iPlusSizeX] = undefined;\n                  }\n                }\n              }\n\n              if (output[1] & 0b00100000) {\n                if (this.cells2[iPlusSizeX - 1] === undefined) {\n                  if (this.cells1[iPlusSizeX - 1] === undefined) {\n                    this.cells1[iPlusSizeX - 1] = null;\n                  }\n                } else if (this.cells2[iPlusSizeX - 1] === null) {\n                  if (this.cells1[iPlusSizeX - 1] === null) {\n                    this.cells1[iPlusSizeX - 1] = undefined;\n                  }\n                }\n              }\n\n              if (output[1] & 0b01000000) {\n                if (this.cells2[i - 1] === undefined) {\n                  if (this.cells1[i - 1] === undefined) {\n                    this.cells1[i - 1] = null;\n                  }\n                } else if (this.cells2[i - 1] === null) {\n                  if (this.cells1[i - 1] === null) {\n                    this.cells1[i - 1] = undefined;\n                  }\n                }\n              }\n\n              if (output[1] & 0b10000000) {\n                if (this.cells2[iMinusSizeX - 1] === undefined) {\n                  if (this.cells1[iMinusSizeX - 1] === undefined) {\n                    this.cells1[iMinusSizeX - 1] = null;\n                  }\n                } else if (this.cells2[iMinusSizeX - 1] === null) {\n                  if (this.cells1[iMinusSizeX - 1] === null) {\n                    this.cells1[iMinusSizeX - 1] = undefined;\n                  }\n                }\n              }\n            }\n          }\n\n          i++;\n        }\n\n        i += 2;\n      } // If more than one cell tried to move or reproduce to the same cell, all of those cells are killed\n\n\n      for (let index of conflictIndices) {\n        this.cells1[index] = null;\n      }\n\n      i = this.sizeX + 1;\n\n      for (let y = 1; y < this.sizeY - 1; y++) {\n        for (let x = 1; x < this.sizeX - 1; x++) {\n          let neighbours = 0;\n          let iMinusSizeX = i - this.sizeX;\n          let iPlusSizeX = i + this.sizeX;\n\n          if (this.cells1[iMinusSizeX - 1] !== undefined) {\n            neighbours++;\n          }\n\n          if (this.cells1[iMinusSizeX] !== undefined) {\n            neighbours++;\n          }\n\n          if (this.cells1[iMinusSizeX + 1] !== undefined) {\n            neighbours++;\n          }\n\n          if (this.cells1[i - 1] !== undefined) {\n            neighbours++;\n          }\n\n          if (this.cells1[i + 1] !== undefined) {\n            neighbours++;\n          }\n\n          if (this.cells1[iPlusSizeX - 1] !== undefined) {\n            neighbours++;\n          }\n\n          if (this.cells1[iPlusSizeX] !== undefined) {\n            neighbours++;\n          }\n\n          if (this.cells1[iPlusSizeX + 1] !== undefined) {\n            neighbours++;\n          }\n\n          if (this.cells1[i] === undefined) {\n            if (neighbours === 3) {\n              this.cells2[i] = null;\n            } else {\n              this.cells2[i] = undefined;\n            }\n          } else {\n            if (neighbours > 1 && neighbours < 4) {\n              this.cells2[i] = this.cells1[i];\n            } else {\n              this.cells2[i] = undefined;\n            }\n          }\n\n          i++;\n        }\n\n        i += 2;\n      }\n\n      i = this.sizeX + 1;\n\n      for (let y = 1; y < this.sizeY - 1; y++) {\n        for (let x = 1; x < this.sizeX - 1; x++) {\n          this.cells1[i] = this.cells2[i];\n          i++;\n        }\n\n        i += 2;\n      }\n    }\n\n    getImage(data) {\n      let i = 0;\n\n      for (let di = 0; di < data.length;) {\n        if (this.cells1[i] === null) {\n          data[di++] = 0;\n          data[di++] = 0;\n          data[di++] = 0;\n          data[di++] = 255;\n        } else if (this.cells1[i] === undefined) {\n          data[di++] = 255;\n          data[di++] = 255;\n          data[di++] = 255;\n          data[di++] = 255;\n        } else {\n          data[di++] = 255;\n          data[di++] = 0;\n          data[di++] = 0;\n          data[di++] = 255;\n        }\n\n        i++;\n      }\n    }\n\n  }\n\n  Board.MOVE_OR_REPRODUCE = 0b00001000;\n  Board.POSITION = 0b00000111;\n  return Board;\n})();","map":null,"metadata":{},"sourceType":"module"}